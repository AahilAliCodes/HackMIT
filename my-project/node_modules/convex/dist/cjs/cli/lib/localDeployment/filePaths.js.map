{
  "version": 3,
  "sources": ["../../../../../src/cli/lib/localDeployment/filePaths.ts"],
  "sourcesContent": ["/*\n~/.convex\n  binaries\n    convex-backend.zip\n    0.0.1\n      convex-local-backend\n    0.0.2\n      convex-local-backend\n  convex-backend-state\n    local-my_team-chess\n      config.json // contains `LocalDeploymentConfig`\n      convex_local_storage\n      convex_local_backend.sqlite3\n    local-my_team-whisper\n      config.json\n      convex_local_storage\n      convex_local_backend.sqlite3\n*/\n\nimport path from \"path\";\nimport { rootDirectory } from \"../utils/utils.js\";\nimport { Context } from \"../../../bundler/context.js\";\n\nexport function rootDeploymentStateDir() {\n  return path.join(rootDirectory(), \"convex-backend-state\");\n}\n\nexport function deploymentStateDir(deploymentName: string) {\n  return path.join(rootDeploymentStateDir(), deploymentName);\n}\n\nexport type LocalDeploymentConfig = {\n  ports: {\n    cloud: number;\n    site: number;\n  };\n  backendVersion: string;\n  adminKey: string;\n};\nexport function loadDeploymentConfig(\n  ctx: Context,\n  deploymentName: string,\n): LocalDeploymentConfig | null {\n  const configFile = path.join(\n    deploymentStateDir(deploymentName),\n    \"config.json\",\n  );\n  if (ctx.fs.exists(configFile)) {\n    return JSON.parse(ctx.fs.readUtf8File(configFile));\n  }\n  return null;\n}\n\nexport function saveDeploymentConfig(\n  ctx: Context,\n  deploymentName: string,\n  config: LocalDeploymentConfig,\n) {\n  const configFile = path.join(\n    deploymentStateDir(deploymentName),\n    \"config.json\",\n  );\n  if (!ctx.fs.exists(deploymentStateDir(deploymentName))) {\n    ctx.fs.mkdir(deploymentStateDir(deploymentName), { recursive: true });\n  }\n  ctx.fs.writeUtf8File(configFile, JSON.stringify(config));\n}\n\nexport function binariesDir() {\n  return path.join(rootDirectory(), \"binaries\");\n}\n\nexport function binaryZip() {\n  return path.join(binariesDir(), \"convex-backend.zip\");\n}\n\nexport function versionedBinaryDir(version: string) {\n  return path.join(binariesDir(), version);\n}\n\nexport function executablePath(version: string) {\n  return path.join(versionedBinaryDir(version), \"convex-local-backend\");\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA,kBAAiB;AACjB,mBAA8B;AAGvB,SAAS,yBAAyB;AACvC,SAAO,YAAAA,QAAK,SAAK,4BAAc,GAAG,sBAAsB;AAC1D;AAEO,SAAS,mBAAmB,gBAAwB;AACzD,SAAO,YAAAA,QAAK,KAAK,uBAAuB,GAAG,cAAc;AAC3D;AAUO,SAAS,qBACd,KACA,gBAC8B;AAC9B,QAAM,aAAa,YAAAA,QAAK;AAAA,IACtB,mBAAmB,cAAc;AAAA,IACjC;AAAA,EACF;AACA,MAAI,IAAI,GAAG,OAAO,UAAU,GAAG;AAC7B,WAAO,KAAK,MAAM,IAAI,GAAG,aAAa,UAAU,CAAC;AAAA,EACnD;AACA,SAAO;AACT;AAEO,SAAS,qBACd,KACA,gBACA,QACA;AACA,QAAM,aAAa,YAAAA,QAAK;AAAA,IACtB,mBAAmB,cAAc;AAAA,IACjC;AAAA,EACF;AACA,MAAI,CAAC,IAAI,GAAG,OAAO,mBAAmB,cAAc,CAAC,GAAG;AACtD,QAAI,GAAG,MAAM,mBAAmB,cAAc,GAAG,EAAE,WAAW,KAAK,CAAC;AAAA,EACtE;AACA,MAAI,GAAG,cAAc,YAAY,KAAK,UAAU,MAAM,CAAC;AACzD;AAEO,SAAS,cAAc;AAC5B,SAAO,YAAAA,QAAK,SAAK,4BAAc,GAAG,UAAU;AAC9C;AAEO,SAAS,YAAY;AAC1B,SAAO,YAAAA,QAAK,KAAK,YAAY,GAAG,oBAAoB;AACtD;AAEO,SAAS,mBAAmB,SAAiB;AAClD,SAAO,YAAAA,QAAK,KAAK,YAAY,GAAG,OAAO;AACzC;AAEO,SAAS,eAAe,SAAiB;AAC9C,SAAO,YAAAA,QAAK,KAAK,mBAAmB,OAAO,GAAG,sBAAsB;AACtE;",
  "names": ["path"]
}
