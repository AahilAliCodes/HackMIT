{
  "version": 3,
  "sources": ["../../../../src/cli/lib/deploy2.ts"],
  "sourcesContent": ["import {\n  changeSpinner,\n  Context,\n  logError,\n  logFailure,\n} from \"../../bundler/context.js\";\nimport {\n  deploymentFetch,\n  ErrorData,\n  logAndHandleFetchError,\n  ThrowingFetchError,\n} from \"./utils/utils.js\";\nimport {\n  schemaStatus,\n  SchemaStatus,\n  StartPushRequest,\n  startPushResponse,\n  StartPushResponse,\n} from \"./deployApi/startPush.js\";\nimport {\n  AppDefinitionConfig,\n  ComponentDefinitionConfig,\n} from \"./deployApi/definitionConfig.js\";\nimport chalk from \"chalk\";\nimport { getTargetDeploymentName } from \"./deployment.js\";\nimport { deploymentDashboardUrlPage } from \"../dashboard.js\";\nimport { finishPushDiff, FinishPushDiff } from \"./deployApi/finishPush.js\";\nimport { Reporter, Span } from \"./tracing.js\";\n\n/** Push configuration2 to the given remote origin. */\nexport async function startPush(\n  ctx: Context,\n  span: Span,\n  request: StartPushRequest,\n  options: {\n    url: string;\n    verbose?: boolean;\n  },\n): Promise<StartPushResponse> {\n  if (options.verbose) {\n    const custom = (_k: string | number, s: any) =>\n      typeof s === \"string\" ? s.slice(0, 40) + (s.length > 40 ? \"...\" : \"\") : s;\n    console.log(JSON.stringify(request, custom, 2));\n  }\n  const onError = (err: any) => {\n    if (err.toString() === \"TypeError: fetch failed\") {\n      changeSpinner(\n        ctx,\n        `Fetch failed, is ${options.url} correct? Retrying...`,\n      );\n    }\n  };\n  const fetch = deploymentFetch(options.url, request.adminKey, onError);\n  changeSpinner(ctx, \"Analyzing and deploying source code...\");\n  try {\n    const response = await fetch(\"/api/deploy2/start_push\", {\n      body: JSON.stringify(request),\n      method: \"POST\",\n      headers: {\n        traceparent: span.encodeW3CTraceparent(),\n      },\n    });\n    return startPushResponse.parse(await response.json());\n  } catch (error: unknown) {\n    const data: ErrorData | undefined =\n      error instanceof ThrowingFetchError ? error.serverErrorData : undefined;\n    if (data?.code === \"AuthConfigMissingEnvironmentVariable\") {\n      const errorMessage = data.message || \"(no error message given)\";\n      // If `npx convex dev` is running using --url there might not be a configured deployment\n      const configuredDeployment = getTargetDeploymentName();\n      const [, variableName] =\n        errorMessage.match(/Environment variable (\\S+)/i) ?? [];\n      const variableQuery =\n        variableName !== undefined ? `?var=${variableName}` : \"\";\n      const dashboardUrl = deploymentDashboardUrlPage(\n        configuredDeployment,\n        `/settings/environment-variables${variableQuery}`,\n      );\n      const message =\n        `Environment variable ${chalk.bold(\n          variableName,\n        )} is used in auth config file but ` +\n        `its value was not set. Go to:\\n\\n    ${chalk.bold(\n          dashboardUrl,\n        )}\\n\\n  to set it up. `;\n      await ctx.crash({\n        exitCode: 1,\n        errorType: \"invalid filesystem or env vars\",\n        errForSentry: error,\n        printedMessage: message,\n      });\n    }\n    logFailure(ctx, \"Error: Unable to start push to \" + options.url);\n    return await logAndHandleFetchError(ctx, error);\n  }\n}\n\n// Long poll every 10s for progress on schema validation.\nconst SCHEMA_TIMEOUT_MS = 10_000;\n\nexport async function waitForSchema(\n  ctx: Context,\n  span: Span,\n  startPush: StartPushResponse,\n  options: {\n    adminKey: string;\n    url: string;\n    dryRun: boolean;\n  },\n) {\n  const fetch = deploymentFetch(options.url, options.adminKey);\n\n  changeSpinner(\n    ctx,\n    \"Backfilling indexes and checking that documents match your schema...\",\n  );\n\n  while (true) {\n    let currentStatus: SchemaStatus;\n    try {\n      const response = await fetch(\"/api/deploy2/wait_for_schema\", {\n        body: JSON.stringify({\n          adminKey: options.adminKey,\n          schemaChange: startPush.schemaChange,\n          timeoutMs: SCHEMA_TIMEOUT_MS,\n          dryRun: options.dryRun,\n        }),\n        method: \"POST\",\n        headers: {\n          traceparent: span.encodeW3CTraceparent(),\n        },\n      });\n      currentStatus = schemaStatus.parse(await response.json());\n    } catch (error: unknown) {\n      logFailure(ctx, \"Error: Unable to wait for schema from \" + options.url);\n      return await logAndHandleFetchError(ctx, error);\n    }\n    switch (currentStatus.type) {\n      case \"inProgress\": {\n        let schemaDone = true;\n        let indexesComplete = 0;\n        let indexesTotal = 0;\n        for (const componentStatus of Object.values(currentStatus.components)) {\n          if (!componentStatus.schemaValidationComplete) {\n            schemaDone = false;\n          }\n          indexesComplete += componentStatus.indexesComplete;\n          indexesTotal += componentStatus.indexesTotal;\n        }\n        const indexesDone = indexesComplete === indexesTotal;\n        let msg: string;\n        if (!indexesDone && !schemaDone) {\n          msg = `Backfilling indexes (${indexesComplete}/${indexesTotal} ready) and checking that documents match your schema...`;\n        } else if (!indexesDone) {\n          msg = `Backfilling indexes (${indexesComplete}/${indexesTotal} ready)...`;\n        } else {\n          msg = \"Checking that documents match your schema...\";\n        }\n        changeSpinner(ctx, msg);\n        break;\n      }\n      case \"failed\": {\n        // Schema validation failed. This could be either because the data\n        // is bad or the schema is wrong. Classify this as a filesystem error\n        // because adjusting `schema.ts` is the most normal next step.\n        let msg = \"Schema validation failed\";\n        if (currentStatus.componentPath) {\n          msg += ` in component \"${currentStatus.componentPath}\"`;\n        }\n        msg += \".\";\n        logFailure(ctx, msg);\n        logError(ctx, chalk.red(`${currentStatus.error}`));\n        return await ctx.crash({\n          exitCode: 1,\n          errorType: {\n            \"invalid filesystem or db data\": currentStatus.tableName\n              ? {\n                  tableName: currentStatus.tableName,\n                  componentPath: currentStatus.componentPath,\n                }\n              : null,\n          },\n          printedMessage: null, // TODO - move logging into here\n        });\n      }\n      case \"raceDetected\": {\n        return await ctx.crash({\n          exitCode: 1,\n          errorType: \"fatal\",\n          printedMessage: `Schema was overwritten by another push.`,\n        });\n      }\n      case \"complete\": {\n        changeSpinner(ctx, \"Schema validation complete.\");\n        return;\n      }\n    }\n  }\n}\n\nexport async function finishPush(\n  ctx: Context,\n  span: Span,\n  startPush: StartPushResponse,\n  options: {\n    adminKey: string;\n    url: string;\n    dryRun: boolean;\n  },\n): Promise<FinishPushDiff> {\n  changeSpinner(ctx, \"Finalizing push...\");\n  const fetch = deploymentFetch(options.url, options.adminKey);\n  try {\n    const response = await fetch(\"/api/deploy2/finish_push\", {\n      body: JSON.stringify({\n        adminKey: options.adminKey,\n        startPush,\n        dryRun: options.dryRun,\n      }),\n      method: \"POST\",\n      headers: {\n        traceparent: span.encodeW3CTraceparent(),\n      },\n    });\n    return finishPushDiff.parse(await response.json());\n  } catch (error: unknown) {\n    logFailure(ctx, \"Error: Unable to finish push to \" + options.url);\n    return await logAndHandleFetchError(ctx, error);\n  }\n}\n\nexport type ComponentDefinitionConfigWithoutImpls = Omit<\n  ComponentDefinitionConfig,\n  \"schema\" | \"functions\"\n>;\nexport type AppDefinitionConfigWithoutImpls = Omit<\n  AppDefinitionConfig,\n  \"schema\" | \"functions\" | \"auth\"\n>;\n\nexport async function reportPushCompleted(\n  ctx: Context,\n  adminKey: string,\n  url: string,\n  reporter: Reporter,\n) {\n  const fetch = deploymentFetch(url, adminKey);\n  try {\n    const response = await fetch(\"/api/deploy2/report_push_completed\", {\n      body: JSON.stringify({\n        adminKey,\n        spans: reporter.spans,\n      }),\n      method: \"POST\",\n    });\n    await response.json();\n  } catch (error: unknown) {\n    logFailure(\n      ctx,\n      \"Error: Unable to report push completed to \" + url + \": \" + error,\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["chalk", "startPush"]
}
