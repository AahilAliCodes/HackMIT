"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var functionSpec_exports = {};
__export(functionSpec_exports, {
  functionSpec: () => functionSpec
});
module.exports = __toCommonJS(functionSpec_exports);
var import_chalk = __toESM(require("chalk"), 1);
var import_context = require("../bundler/context.js");
var import_api = require("./lib/api.js");
var import_run = require("./lib/run.js");
var import_extra_typings = require("@commander-js/extra-typings");
var import_command = require("./lib/command.js");
const functionSpec = new import_extra_typings.Command("function-spec").summary("List function metadata from your deployment").description(
  "List argument and return values to your Convex functions.\n\nBy default, this inspects your dev deployment."
).addOption(new import_extra_typings.Option("--file", "Output as JSON to a file.")).addDeploymentSelectionOptions(
  (0, import_command.actionDescription)("Read function metadata from")
).showHelpAfterError().action(async (options) => {
  const ctx = (0, import_context.oneoffContext)();
  const deploymentSelection = (0, import_api.deploymentSelectionFromOptions)(options);
  const { adminKey, url: deploymentUrl } = await (0, import_api.fetchDeploymentCredentialsWithinCurrentProject)(
    ctx,
    deploymentSelection
  );
  const functions = await (0, import_run.runQuery)(
    ctx,
    deploymentUrl,
    adminKey,
    "_system/cli/modules:apiSpec",
    void 0,
    {}
  );
  const output = JSON.stringify(
    { url: deploymentUrl, functions },
    null,
    2
  );
  if (options.file) {
    const fileName = `function_spec_${Date.now().valueOf()}.json`;
    ctx.fs.writeUtf8File(fileName, output);
    (0, import_context.logOutput)(ctx, import_chalk.default.green(`Wrote function spec to ${fileName}`));
  } else {
    (0, import_context.logOutput)(ctx, output);
  }
});
//# sourceMappingURL=functionSpec.js.map
