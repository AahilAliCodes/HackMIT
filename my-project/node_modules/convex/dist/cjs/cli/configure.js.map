{
  "version": 3,
  "sources": ["../../../src/cli/configure.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport {\n  Context,\n  logFailure,\n  logFinishedStep,\n  logMessage,\n  logWarning,\n  showSpinner,\n} from \"../bundler/context.js\";\nimport {\n  DeploymentType,\n  DeploymentName,\n  fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows,\n  createProject,\n} from \"./lib/api.js\";\nimport {\n  configFilepath,\n  configName,\n  readProjectConfig,\n  upgradeOldAuthInfoToAuthConfig,\n  writeProjectConfig,\n} from \"./lib/config.js\";\nimport {\n  CONVEX_DEPLOYMENT_VAR_NAME,\n  DeploymentDetails,\n  eraseDeploymentEnvVar,\n  writeDeploymentEnvVar,\n} from \"./lib/deployment.js\";\nimport { finalizeConfiguration } from \"./lib/init.js\";\nimport {\n  bigBrainAPIMaybeThrows,\n  functionsDir,\n  getConfiguredDeploymentName,\n  hasProjects,\n  logAndHandleFetchError,\n  ThrowingFetchError,\n  validateOrSelectProject,\n  validateOrSelectTeam,\n} from \"./lib/utils/utils.js\";\nimport { writeConvexUrlToEnvFile } from \"./lib/envvars.js\";\nimport path from \"path\";\nimport { projectDashboardUrl } from \"./dashboard.js\";\nimport { doCodegen, doInitCodegen } from \"./lib/codegen.js\";\nimport { handleLocalDeployment } from \"./lib/localDeployment/localDeployment.js\";\nimport { promptOptions, promptString } from \"./lib/utils/prompts.js\";\n\ntype DeploymentCredentials = {\n  url: string;\n  adminKey: string;\n};\n\n/**\n * As of writing, this is used by:\n * - `npx convex dev`\n * - `npx convex codegen`\n *\n * But is not used by `npx convex deploy` or other commands.\n */\nexport async function deploymentCredentialsOrConfigure(\n  ctx: Context,\n  chosenConfiguration: \"new\" | \"existing\" | \"ask\" | null,\n  cmdOptions: {\n    prod: boolean;\n    local: boolean;\n    localOptions: {\n      ports?: {\n        cloud: number;\n        site: number;\n      };\n      backendVersion?: string | undefined;\n      forceUpgrade: boolean;\n    };\n    team?: string | undefined;\n    project?: string | undefined;\n    url?: string | undefined;\n    adminKey?: string | undefined;\n  },\n): Promise<\n  DeploymentCredentials & {\n    deploymentName?: DeploymentName;\n  }\n> {\n  if (cmdOptions.url !== undefined && cmdOptions.adminKey !== undefined) {\n    const credentials = await handleManuallySetUrlAndAdminKey(ctx, {\n      url: cmdOptions.url,\n      adminKey: cmdOptions.adminKey,\n    });\n    return { ...credentials };\n  }\n  const { projectSlug, teamSlug } = await selectProject(\n    ctx,\n    chosenConfiguration,\n    { team: cmdOptions.team, project: cmdOptions.project },\n  );\n  const deploymentOptions: DeploymentOptions = cmdOptions.prod\n    ? { kind: \"prod\" }\n    : cmdOptions.local\n      ? { kind: \"local\", ...cmdOptions.localOptions }\n      : { kind: \"dev\" };\n  const {\n    deploymentName,\n    deploymentUrl: url,\n    adminKey,\n  } = await ensureDeploymentProvisioned(ctx, {\n    teamSlug,\n    projectSlug,\n    deploymentOptions,\n  });\n  await updateEnvAndConfigForDeploymentSelection(ctx, {\n    url,\n    deploymentName,\n    teamSlug,\n    projectSlug,\n    deploymentType: deploymentOptions.kind,\n  });\n\n  return { deploymentName, url, adminKey };\n}\n\nasync function handleManuallySetUrlAndAdminKey(\n  ctx: Context,\n  cmdOptions: { url: string; adminKey: string },\n) {\n  const { url, adminKey } = cmdOptions;\n  const didErase = await eraseDeploymentEnvVar(ctx);\n  if (didErase) {\n    logMessage(\n      ctx,\n      chalk.yellowBright(\n        `Removed the CONVEX_DEPLOYMENT environment variable from .env.local`,\n      ),\n    );\n  }\n  const envVarWrite = await writeConvexUrlToEnvFile(ctx, url);\n  if (envVarWrite !== null) {\n    logMessage(\n      ctx,\n      chalk.green(\n        `Saved the given --url as ${envVarWrite.envVar} to ${envVarWrite.envFile}`,\n      ),\n    );\n  }\n  return { url, adminKey };\n}\n\nasync function selectProject(\n  ctx: Context,\n  chosenConfiguration: \"new\" | \"existing\" | \"ask\" | null,\n  cmdOptions: {\n    team?: string | undefined;\n    project?: string | undefined;\n  },\n): Promise<{ teamSlug: string; projectSlug: string }> {\n  let result:\n    | { teamSlug: string; projectSlug: string }\n    | \"AccessDenied\"\n    | null = null;\n  if (chosenConfiguration === null) {\n    result = await getConfiguredProjectSlugs(ctx);\n    if (result !== null && result !== \"AccessDenied\") {\n      return result;\n    }\n  }\n  const reconfigure = result === \"AccessDenied\";\n  // Prompt the user to select a project.\n  const choice =\n    chosenConfiguration !== \"ask\" && chosenConfiguration !== null\n      ? chosenConfiguration\n      : await askToConfigure(ctx, reconfigure);\n  switch (choice) {\n    case \"new\":\n      return selectNewProject(ctx, cmdOptions);\n    case \"existing\":\n      return selectExistingProject(ctx, cmdOptions);\n    default:\n      return await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage: \"No project selected.\",\n      });\n  }\n}\n\nasync function getConfiguredProjectSlugs(ctx: Context): Promise<\n  | {\n      projectSlug: string;\n      teamSlug: string;\n    }\n  | \"AccessDenied\"\n  | null\n> {\n  // Try and infer the project from the deployment name\n  const deploymentName = await getConfiguredDeploymentName(ctx);\n  if (deploymentName !== null) {\n    const result = await getTeamAndProjectSlugForDeployment(ctx, {\n      deploymentName,\n      kind: \"cloud\",\n    });\n    if (result !== null) {\n      return result;\n    } else {\n      logFailure(\n        ctx,\n        `You don't have access to the project with deployment ${chalk.bold(\n          deploymentName,\n        )}, as configured in ${chalk.bold(CONVEX_DEPLOYMENT_VAR_NAME)}`,\n      );\n      return \"AccessDenied\";\n    }\n  }\n  // Try and infer the project from `convex.json`\n  const { projectConfig } = await readProjectConfig(ctx);\n  const { team, project } = projectConfig;\n  if (typeof team === \"string\" && typeof project === \"string\") {\n    const hasAccess = await hasAccessToProject(ctx, {\n      teamSlug: team,\n      projectSlug: project,\n    });\n    if (!hasAccess) {\n      logFailure(\n        ctx,\n        `You don't have access to the project ${chalk.bold(project)} in team ${chalk.bold(team)} as configured in ${chalk.bold(\"convex.json\")}`,\n      );\n      return \"AccessDenied\";\n    }\n    return { teamSlug: team, projectSlug: project };\n  }\n  return null;\n}\n\nasync function getTeamAndProjectSlugForDeployment(\n  ctx: Context,\n  selector: { deploymentName: string; kind: \"local\" | \"cloud\" },\n): Promise<{ teamSlug: string; projectSlug: string } | null> {\n  try {\n    const body = await bigBrainAPIMaybeThrows({\n      ctx,\n      url: `/api/deployment/${selector.deploymentName}/team_and_project`,\n      method: \"GET\",\n    });\n    return { teamSlug: body.team, projectSlug: body.project };\n  } catch (err) {\n    if (\n      err instanceof ThrowingFetchError &&\n      (err.serverErrorData?.code === \"DeploymentNotFound\" ||\n        err.serverErrorData?.code === \"ProjectNotFound\")\n    ) {\n      return null;\n    }\n    return logAndHandleFetchError(ctx, err);\n  }\n}\n\nasync function hasAccessToProject(\n  ctx: Context,\n  selector: { projectSlug: string; teamSlug: string },\n): Promise<boolean> {\n  try {\n    await bigBrainAPIMaybeThrows({\n      ctx,\n      url: `/api/teams/${selector.teamSlug}/projects/${selector.projectSlug}/deployments`,\n      method: \"GET\",\n    });\n    return true;\n  } catch (err) {\n    if (\n      err instanceof ThrowingFetchError &&\n      (err.serverErrorData?.code === \"TeamNotFound\" ||\n        err.serverErrorData?.code === \"ProjectNotFound\")\n    ) {\n      return false;\n    }\n    return logAndHandleFetchError(ctx, err);\n  }\n}\n\nconst cwd = path.basename(process.cwd());\nasync function selectNewProject(\n  ctx: Context,\n  config: {\n    team?: string | undefined;\n    project?: string | undefined;\n  },\n) {\n  const { teamSlug: selectedTeam, chosen: didChooseBetweenTeams } =\n    await validateOrSelectTeam(ctx, config.team, \"Team:\");\n  let projectName: string = config.project || cwd;\n  if (!config.project) {\n    projectName = await promptString(ctx, {\n      message: \"Project name:\",\n      default: cwd,\n    });\n  }\n\n  showSpinner(ctx, \"Creating new Convex project...\");\n\n  let projectSlug, teamSlug, projectsRemaining;\n  try {\n    ({ projectSlug, teamSlug, projectsRemaining } = await createProject(ctx, {\n      teamSlug: selectedTeam,\n      projectName,\n    }));\n  } catch (err) {\n    logFailure(ctx, \"Unable to create project.\");\n    return await logAndHandleFetchError(ctx, err);\n  }\n  const teamMessage = didChooseBetweenTeams\n    ? \" in team \" + chalk.bold(teamSlug)\n    : \"\";\n  logFinishedStep(\n    ctx,\n    `Created project ${chalk.bold(\n      projectSlug,\n    )}${teamMessage}, manage it at ${chalk.bold(\n      projectDashboardUrl(teamSlug, projectSlug),\n    )}`,\n  );\n\n  if (projectsRemaining <= 2) {\n    logWarning(\n      ctx,\n      chalk.yellow.bold(\n        `Your account now has ${projectsRemaining} project${\n          projectsRemaining === 1 ? \"\" : \"s\"\n        } remaining.`,\n      ),\n    );\n  }\n\n  const { projectConfig: existingProjectConfig } = await readProjectConfig(ctx);\n  const configPath = await configFilepath(ctx);\n  const functionsPath = functionsDir(configPath, existingProjectConfig);\n  await doInitCodegen(ctx, functionsPath, true);\n  // Disable typechecking since there isn't any code yet.\n  await doCodegen(ctx, functionsPath, \"disable\");\n  return { teamSlug, projectSlug };\n}\n\nasync function selectExistingProject(\n  ctx: Context,\n  config: {\n    team?: string | undefined;\n    project?: string | undefined;\n  },\n): Promise<{ teamSlug: string; projectSlug: string }> {\n  const { teamSlug } = await validateOrSelectTeam(ctx, config.team, \"Team:\");\n\n  const projectSlug = await validateOrSelectProject(\n    ctx,\n    config.project,\n    teamSlug,\n    \"Configure project\",\n    \"Project:\",\n  );\n  if (projectSlug === null) {\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: \"Run the command again to create a new project instead.\",\n    });\n  }\n\n  showSpinner(ctx, `Reinitializing project ${projectSlug}...\\n`);\n\n  const { projectConfig: existingProjectConfig } = await readProjectConfig(ctx);\n\n  const functionsPath = functionsDir(configName(), existingProjectConfig);\n\n  await doCodegen(ctx, functionsPath, \"disable\");\n  return { teamSlug, projectSlug };\n}\n\nasync function askToConfigure(\n  ctx: Context,\n  reconfigure: boolean,\n): Promise<\"new\" | \"existing\"> {\n  if (!(await hasProjects(ctx))) {\n    return \"new\";\n  }\n  return await promptOptions(ctx, {\n    message: reconfigure\n      ? \"Configure a different project?\"\n      : \"What would you like to configure?\",\n    default: \"new\",\n    choices: [\n      { name: \"create a new project\", value: \"new\" },\n      { name: \"choose an existing project\", value: \"existing\" },\n    ],\n  });\n}\n\ntype DeploymentOptions =\n  | {\n      kind: \"prod\";\n    }\n  | { kind: \"dev\" }\n  | {\n      kind: \"local\";\n      ports?: {\n        cloud: number;\n        site: number;\n      };\n      backendVersion?: string;\n      forceUpgrade: boolean;\n    };\n\n/**\n * This method assumes that the member has access to the selected project.\n */\nasync function ensureDeploymentProvisioned(\n  ctx: Context,\n  options: {\n    teamSlug: string;\n    projectSlug: string;\n    deploymentOptions: DeploymentOptions;\n  },\n): Promise<DeploymentDetails> {\n  switch (options.deploymentOptions.kind) {\n    case \"dev\":\n    case \"prod\": {\n      const credentials =\n        await fetchDeploymentCredentialsProvisioningDevOrProdMaybeThrows(\n          ctx,\n          { teamSlug: options.teamSlug, projectSlug: options.projectSlug },\n          options.deploymentOptions.kind,\n        );\n      return {\n        ...credentials,\n        onActivity: null,\n      };\n    }\n    case \"local\": {\n      const credentials = await handleLocalDeployment(ctx, {\n        teamSlug: options.teamSlug,\n        projectSlug: options.projectSlug,\n        ...options.deploymentOptions,\n      });\n      return credentials;\n    }\n    default:\n      return await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage: `Invalid deployment type: ${(options.deploymentOptions as any).kind}`,\n        errForSentry: `Invalid deployment type: ${(options.deploymentOptions as any).kind}`,\n      });\n  }\n}\n\nasync function updateEnvAndConfigForDeploymentSelection(\n  ctx: Context,\n  options: {\n    url: string;\n    deploymentName: string;\n    teamSlug: string;\n    projectSlug: string;\n    deploymentType: DeploymentType;\n  },\n) {\n  const { configPath, projectConfig: existingProjectConfig } =\n    await readProjectConfig(ctx);\n\n  const functionsPath = functionsDir(configName(), existingProjectConfig);\n\n  const { wroteToGitIgnore, changedDeploymentEnvVar } =\n    await writeDeploymentEnvVar(ctx, options.deploymentType, {\n      team: options.teamSlug,\n      project: options.projectSlug,\n      deploymentName: options.deploymentName,\n    });\n  const projectConfig = await upgradeOldAuthInfoToAuthConfig(\n    ctx,\n    existingProjectConfig,\n    functionsPath,\n  );\n  await writeProjectConfig(ctx, projectConfig, {\n    deleteIfAllDefault: true,\n  });\n  await finalizeConfiguration(ctx, {\n    deploymentType: options.deploymentType,\n    url: options.url,\n    wroteToGitIgnore,\n    changedDeploymentEnvVar,\n    functionsPath: functionsDir(configPath, projectConfig),\n  });\n}\n"],
  "mappings": "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",
  "names": ["chalk", "path"]
}
