{
  "version": 3,
  "sources": ["../../../src/cli/env.ts"],
  "sourcesContent": ["import { Command } from \"@commander-js/extra-typings\";\nimport chalk from \"chalk\";\nimport {\n  Context,\n  logFailure,\n  logFinishedStep,\n  logMessage,\n  logOutput,\n  oneoffContext,\n} from \"../bundler/context.js\";\nimport {\n  DeploymentSelectionOptions,\n  deploymentSelectionFromOptions,\n  fetchDeploymentCredentialsWithinCurrentProject,\n} from \"./lib/api.js\";\nimport { actionDescription } from \"./lib/command.js\";\nimport { runQuery } from \"./lib/run.js\";\nimport {\n  deploymentFetch,\n  ensureHasConvexDependency,\n  logAndHandleFetchError,\n} from \"./lib/utils/utils.js\";\n\nconst envSet = new Command(\"set\")\n  // Pretend value is required\n  .usage(\"[options] <name> <value>\")\n  .arguments(\"<name> [value]\")\n  .summary(\"Set a variable\")\n  .description(\n    \"Set a variable: `npx convex env set NAME value`\\n\" +\n      \"If the variable already exists, its value is updated.\\n\\n\" +\n      \"A single `NAME=value` argument is also supported.\",\n  )\n  .configureHelp({ showGlobalOptions: true })\n  .allowExcessArguments(false)\n  .action(async (originalName, originalValue, _options, cmd) => {\n    const options = cmd.optsWithGlobals();\n    const ctx = oneoffContext();\n    await ensureHasConvexDependency(ctx, \"env set\");\n    const [name, value] = await allowEqualsSyntax(\n      ctx,\n      originalName,\n      originalValue,\n    );\n    const where = await callUpdateEnvironmentVariables(ctx, options, [\n      { name, value },\n    ]);\n    const formatted = /\\s/.test(value) ? `\"${value}\"` : value;\n    logFinishedStep(\n      ctx,\n      `Successfully set ${chalk.bold(name)} to ${chalk.bold(formatted)}${where}`,\n    );\n  });\n\nasync function allowEqualsSyntax(\n  ctx: Context,\n  name: string,\n  value: string | undefined,\n) {\n  if (value === undefined) {\n    if (/^[a-zA-Z][a-zA-Z0-9_]+=/.test(name)) {\n      return name.split(\"=\", 2);\n    } else {\n      return await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage: \"error: missing required argument 'value'\",\n      });\n    }\n  }\n  return [name, value];\n}\n\nconst envGet = new Command(\"get\")\n  .arguments(\"<name>\")\n  .summary(\"Print a variable's value\")\n  .description(\"Print a variable's value: `npx convex env get NAME`\")\n  .configureHelp({ showGlobalOptions: true })\n  .allowExcessArguments(false)\n  .action(async (envVarName, _options, cmd) => {\n    const ctx = oneoffContext();\n    await ensureHasConvexDependency(ctx, \"env get\");\n    const options = cmd.optsWithGlobals();\n    const deploymentSelection = deploymentSelectionFromOptions(options);\n    const { adminKey, url } =\n      await fetchDeploymentCredentialsWithinCurrentProject(\n        ctx,\n        deploymentSelection,\n      );\n\n    const envVar = (await runQuery(\n      ctx,\n      url,\n      adminKey,\n      \"_system/cli/queryEnvironmentVariables:get\",\n      undefined,\n      { name: envVarName },\n    )) as EnvVar | null;\n    if (envVar === null) {\n      logFailure(ctx, `Environment variable \"${envVarName}\" not found.`);\n      return;\n    }\n    const { value } = envVar;\n    logOutput(ctx, `${value}`);\n  });\n\nconst envRemove = new Command(\"remove\")\n  .alias(\"rm\")\n  .alias(\"unset\")\n  .arguments(\"<name>\")\n  .summary(\"Unset a variable\")\n  .description(\n    \"Unset a variable: `npx convex env remove NAME`\\n\" +\n      \"If the variable doesn't exist, the command doesn't do anything and succeeds.\",\n  )\n  .configureHelp({ showGlobalOptions: true })\n  .allowExcessArguments(false)\n  .action(async (name, _options, cmd) => {\n    const ctx = oneoffContext();\n    const options = cmd.optsWithGlobals();\n    await ensureHasConvexDependency(ctx, \"env remove\");\n    const where = await callUpdateEnvironmentVariables(ctx, options, [\n      { name },\n    ]);\n    logFinishedStep(ctx, `Successfully unset ${chalk.bold(name)}${where}`);\n  });\n\nconst envList = new Command(\"list\")\n  .summary(\"List all variables\")\n  .description(\"List all variables: `npx convex env list`\")\n  .configureHelp({ showGlobalOptions: true })\n  .allowExcessArguments(false)\n  .action(async (_options, cmd) => {\n    const ctx = oneoffContext();\n    await ensureHasConvexDependency(ctx, \"env list\");\n    const options = cmd.optsWithGlobals();\n    const deploymentSelection = deploymentSelectionFromOptions(options);\n    const { adminKey, url } =\n      await fetchDeploymentCredentialsWithinCurrentProject(\n        ctx,\n        deploymentSelection,\n      );\n\n    const envs = (await runQuery(\n      ctx,\n      url,\n      adminKey,\n      \"_system/cli/queryEnvironmentVariables\",\n      undefined,\n      {},\n    )) as EnvVar[];\n    if (envs.length === 0) {\n      logMessage(ctx, \"No environment variables set.\");\n      return;\n    }\n    for (const { name, value } of envs) {\n      logOutput(ctx, `${name}=${value}`);\n    }\n  });\n\ntype EnvVarChange = {\n  name: string;\n  value?: string;\n};\n\ntype EnvVar = {\n  name: string;\n  value: string;\n};\n\nasync function callUpdateEnvironmentVariables(\n  ctx: Context,\n  options: DeploymentSelectionOptions,\n  changes: EnvVarChange[],\n) {\n  const deploymentSelection = deploymentSelectionFromOptions(options);\n  const { adminKey, url, deploymentName, deploymentType } =\n    await fetchDeploymentCredentialsWithinCurrentProject(\n      ctx,\n      deploymentSelection,\n    );\n  const fetch = deploymentFetch(url, adminKey);\n  try {\n    await fetch(\"/api/update_environment_variables\", {\n      body: JSON.stringify({ changes }),\n      method: \"POST\",\n    });\n    return deploymentType !== undefined || deploymentName !== undefined\n      ? ` (on${\n          deploymentType !== undefined ? \" \" + chalk.bold(deploymentType) : \"\"\n        } deployment${\n          deploymentName !== undefined ? \" \" + chalk.bold(deploymentName) : \"\"\n        })`\n      : \"\";\n  } catch (e) {\n    return await logAndHandleFetchError(ctx, e);\n  }\n}\n\nexport const env = new Command(\"env\")\n  .summary(\"Set and view environment variables\")\n  .description(\n    \"Set and view environment variables on your deployment\\n\\n\" +\n      \"  Set a variable: `npx convex env set NAME value`\\n\" +\n      \"  Unset a variable: `npx convex env remove NAME`\\n\" +\n      \"  List all variables: `npx convex env list`\\n\" +\n      \"  Print a variable's value: `npx convex env get NAME`\\n\\n\" +\n      \"By default, this sets and views variables on your dev deployment.\",\n  )\n  .addCommand(envSet)\n  .addCommand(envGet)\n  .addCommand(envRemove)\n  .addCommand(envList)\n  .addHelpCommand(false)\n  .addDeploymentSelectionOptions(\n    actionDescription(\"Set and view environment variables on\"),\n  );\n"],
  "mappings": "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",
  "names": ["chalk"]
}
