{
  "version": 3,
  "sources": ["../../../src/cli/functionSpec.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport { logOutput, oneoffContext } from \"../bundler/context.js\";\nimport {\n  deploymentSelectionFromOptions,\n  fetchDeploymentCredentialsWithinCurrentProject,\n} from \"./lib/api.js\";\nimport { runQuery } from \"./lib/run.js\";\nimport { Command, Option } from \"@commander-js/extra-typings\";\nimport { actionDescription } from \"./lib/command.js\";\n\nexport const functionSpec = new Command(\"function-spec\")\n  .summary(\"List function metadata from your deployment\")\n  .description(\n    \"List argument and return values to your Convex functions.\\n\\n\" +\n      \"By default, this inspects your dev deployment.\",\n  )\n  .addOption(new Option(\"--file\", \"Output as JSON to a file.\"))\n  .addDeploymentSelectionOptions(\n    actionDescription(\"Read function metadata from\"),\n  )\n  .showHelpAfterError()\n  .action(async (options) => {\n    const ctx = oneoffContext();\n    const deploymentSelection = deploymentSelectionFromOptions(options);\n\n    const { adminKey, url: deploymentUrl } =\n      await fetchDeploymentCredentialsWithinCurrentProject(\n        ctx,\n        deploymentSelection,\n      );\n\n    const functions = (await runQuery(\n      ctx,\n      deploymentUrl,\n      adminKey,\n      \"_system/cli/modules:apiSpec\",\n      undefined,\n      {},\n    )) as any[];\n\n    const output = JSON.stringify(\n      { url: deploymentUrl, functions: functions },\n      null,\n      2,\n    );\n\n    if (options.file) {\n      const fileName = `function_spec_${Date.now().valueOf()}.json`;\n      ctx.fs.writeUtf8File(fileName, output);\n      logOutput(ctx, chalk.green(`Wrote function spec to ${fileName}`));\n    } else {\n      logOutput(ctx, output);\n    }\n  });\n"],
  "mappings": ";AAAA,OAAO,WAAW;AAClB,SAAS,WAAW,qBAAqB;AACzC;AAAA,EACE;AAAA,EACA;AAAA,OACK;AACP,SAAS,gBAAgB;AACzB,SAAS,SAAS,cAAc;AAChC,SAAS,yBAAyB;AAE3B,aAAM,eAAe,IAAI,QAAQ,eAAe,EACpD,QAAQ,6CAA6C,EACrD;AAAA,EACC;AAEF,EACC,UAAU,IAAI,OAAO,UAAU,2BAA2B,CAAC,EAC3D;AAAA,EACC,kBAAkB,6BAA6B;AACjD,EACC,mBAAmB,EACnB,OAAO,OAAO,YAAY;AACzB,QAAM,MAAM,cAAc;AAC1B,QAAM,sBAAsB,+BAA+B,OAAO;AAElE,QAAM,EAAE,UAAU,KAAK,cAAc,IACnC,MAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF;AAEF,QAAM,YAAa,MAAM;AAAA,IACvB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,CAAC;AAAA,EACH;AAEA,QAAM,SAAS,KAAK;AAAA,IAClB,EAAE,KAAK,eAAe,UAAqB;AAAA,IAC3C;AAAA,IACA;AAAA,EACF;AAEA,MAAI,QAAQ,MAAM;AAChB,UAAM,WAAW,iBAAiB,KAAK,IAAI,EAAE,QAAQ,CAAC;AACtD,QAAI,GAAG,cAAc,UAAU,MAAM;AACrC,cAAU,KAAK,MAAM,MAAM,0BAA0B,QAAQ,EAAE,CAAC;AAAA,EAClE,OAAO;AACL,cAAU,KAAK,MAAM;AAAA,EACvB;AACF,CAAC;",
  "names": []
}
