{
  "version": 3,
  "sources": ["../../../../../src/cli/lib/deployApi/componentDefinition.ts"],
  "sourcesContent": ["import { z } from \"zod\";\nimport { canonicalizedModulePath, componentDefinitionPath } from \"./paths.js\";\nimport { Identifier, Reference, identifier, reference } from \"./types.js\";\nimport { analyzedModule, udfConfig } from \"./modules.js\";\nimport { looseObject } from \"./utils.js\";\n\nexport const componentArgumentValidator = looseObject({\n  type: z.literal(\"value\"),\n  // Validator serialized to JSON.\n  value: z.string(),\n});\n\nexport const componentDefinitionType = z.union([\n  looseObject({ type: z.literal(\"app\") }),\n  looseObject({\n    type: z.literal(\"childComponent\"),\n    name: identifier,\n    args: z.array(z.tuple([identifier, componentArgumentValidator])),\n  }),\n]);\n\nexport const componentArgument = looseObject({\n  type: z.literal(\"value\"),\n  // Value serialized to JSON.\n  value: z.string(),\n});\n\nexport const componentInstantiation = looseObject({\n  name: identifier,\n  path: componentDefinitionPath,\n  args: z.nullable(z.array(z.tuple([identifier, componentArgument]))),\n});\n\nexport type ComponentExports =\n  | { type: \"leaf\"; leaf: Reference }\n  | { type: \"branch\"; branch: [Identifier, ComponentExports][] };\n\nexport const componentExports: z.ZodType<ComponentExports> = z.lazy(() =>\n  z.union([\n    looseObject({\n      type: z.literal(\"leaf\"),\n      leaf: reference,\n    }),\n    looseObject({\n      type: z.literal(\"branch\"),\n      branch: z.array(z.tuple([identifier, componentExports])),\n    }),\n  ]),\n);\n\nexport const componentDefinitionMetadata = looseObject({\n  path: componentDefinitionPath,\n  definitionType: componentDefinitionType,\n  childComponents: z.array(componentInstantiation),\n  httpMounts: z.record(z.string(), reference),\n  exports: looseObject({\n    type: z.literal(\"branch\"),\n    branch: z.array(z.tuple([identifier, componentExports])),\n  }),\n});\n\nexport const evaluatedComponentDefinition = looseObject({\n  definition: componentDefinitionMetadata,\n  schema: z.any(),\n  functions: z.record(canonicalizedModulePath, analyzedModule),\n  udfConfig,\n});\nexport type EvaluatedComponentDefinition = z.infer<\n  typeof evaluatedComponentDefinition\n>;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAkB;AAClB,mBAAiE;AACjE,mBAA6D;AAC7D,qBAA0C;AAC1C,mBAA4B;AAErB,MAAM,iCAA6B,0BAAY;AAAA,EACpD,MAAM,aAAE,QAAQ,OAAO;AAAA;AAAA,EAEvB,OAAO,aAAE,OAAO;AAClB,CAAC;AAEM,MAAM,0BAA0B,aAAE,MAAM;AAAA,MAC7C,0BAAY,EAAE,MAAM,aAAE,QAAQ,KAAK,EAAE,CAAC;AAAA,MACtC,0BAAY;AAAA,IACV,MAAM,aAAE,QAAQ,gBAAgB;AAAA,IAChC,MAAM;AAAA,IACN,MAAM,aAAE,MAAM,aAAE,MAAM,CAAC,yBAAY,0BAA0B,CAAC,CAAC;AAAA,EACjE,CAAC;AACH,CAAC;AAEM,MAAM,wBAAoB,0BAAY;AAAA,EAC3C,MAAM,aAAE,QAAQ,OAAO;AAAA;AAAA,EAEvB,OAAO,aAAE,OAAO;AAClB,CAAC;AAEM,MAAM,6BAAyB,0BAAY;AAAA,EAChD,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM,aAAE,SAAS,aAAE,MAAM,aAAE,MAAM,CAAC,yBAAY,iBAAiB,CAAC,CAAC,CAAC;AACpE,CAAC;AAMM,MAAM,mBAAgD,aAAE;AAAA,EAAK,MAClE,aAAE,MAAM;AAAA,QACN,0BAAY;AAAA,MACV,MAAM,aAAE,QAAQ,MAAM;AAAA,MACtB,MAAM;AAAA,IACR,CAAC;AAAA,QACD,0BAAY;AAAA,MACV,MAAM,aAAE,QAAQ,QAAQ;AAAA,MACxB,QAAQ,aAAE,MAAM,aAAE,MAAM,CAAC,yBAAY,gBAAgB,CAAC,CAAC;AAAA,IACzD,CAAC;AAAA,EACH,CAAC;AACH;AAEO,MAAM,kCAA8B,0BAAY;AAAA,EACrD,MAAM;AAAA,EACN,gBAAgB;AAAA,EAChB,iBAAiB,aAAE,MAAM,sBAAsB;AAAA,EAC/C,YAAY,aAAE,OAAO,aAAE,OAAO,GAAG,sBAAS;AAAA,EAC1C,aAAS,0BAAY;AAAA,IACnB,MAAM,aAAE,QAAQ,QAAQ;AAAA,IACxB,QAAQ,aAAE,MAAM,aAAE,MAAM,CAAC,yBAAY,gBAAgB,CAAC,CAAC;AAAA,EACzD,CAAC;AACH,CAAC;AAEM,MAAM,mCAA+B,0BAAY;AAAA,EACtD,YAAY;AAAA,EACZ,QAAQ,aAAE,IAAI;AAAA,EACd,WAAW,aAAE,OAAO,sCAAyB,6BAAc;AAAA,EAC3D;AACF,CAAC;",
  "names": []
}
