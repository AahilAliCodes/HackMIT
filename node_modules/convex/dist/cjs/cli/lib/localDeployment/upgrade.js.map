{
  "version": 3,
  "sources": ["../../../../../src/cli/lib/localDeployment/upgrade.ts"],
  "sourcesContent": ["import path from \"path\";\nimport {\n  Context,\n  logFailure,\n  logFinishedStep,\n  logVerbose,\n} from \"../../../bundler/context.js\";\nimport { runQuery } from \"../run.js\";\nimport { deploymentStateDir, saveDeploymentConfig } from \"./filePaths.js\";\nimport {\n  ensureBackendBinaryDownloaded,\n  ensureBackendStopped,\n  localDeploymentUrl,\n  runLocalBackend,\n} from \"./run.js\";\nimport {\n  downloadSnapshotExport,\n  startSnapshotExport,\n} from \"../../convexExport.js\";\nimport { deploymentFetch, logAndHandleFetchError } from \"../utils/utils.js\";\nimport {\n  confirmImport,\n  uploadForImport,\n  waitForStableImportState,\n} from \"../../convexImport.js\";\nimport { promptOptions, promptYesNo } from \"../utils/prompts.js\";\nimport { recursivelyDelete } from \"../fsUtils.js\";\n\nexport async function handlePotentialUpgrade(\n  ctx: Context,\n  args: {\n    deploymentName: string;\n    oldVersion: string | null;\n    newBinaryPath: string;\n    newVersion: string;\n    ports: {\n      cloud: number;\n      site: number;\n    };\n    adminKey: string;\n    forceUpgrade: boolean;\n  },\n): Promise<{ cleanupHandle: string }> {\n  const newConfig = {\n    ports: args.ports,\n    backendVersion: args.newVersion,\n    adminKey: args.adminKey,\n  };\n  if (args.oldVersion === null || args.oldVersion === args.newVersion) {\n    // No upgrade needed. Save the current config and start running the backend.\n    saveDeploymentConfig(ctx, args.deploymentName, newConfig);\n    return runLocalBackend(ctx, {\n      binaryPath: args.newBinaryPath,\n      deploymentName: args.deploymentName,\n      ports: args.ports,\n    });\n  }\n  const confirmed =\n    args.forceUpgrade ||\n    (await promptYesNo(ctx, {\n      message: `This deployment is using an older version of the Convex backend. Upgrade now?`,\n      default: true,\n    }));\n  if (!confirmed) {\n    const { binaryPath: oldBinaryPath } = await ensureBackendBinaryDownloaded(\n      ctx,\n      {\n        kind: \"version\",\n        version: args.oldVersion,\n      },\n    );\n    // Skipping upgrade, save the config with the old version and run.\n    saveDeploymentConfig(ctx, args.deploymentName, {\n      ...newConfig,\n      backendVersion: args.oldVersion,\n    });\n    return runLocalBackend(ctx, {\n      binaryPath: oldBinaryPath,\n      ports: args.ports,\n      deploymentName: args.deploymentName,\n    });\n  }\n  const choice = args.forceUpgrade\n    ? \"transfer\"\n    : await promptOptions(ctx, {\n        message: \"Transfer data from existing deployment?\",\n        default: \"transfer\",\n        choices: [\n          { name: \"transfer data\", value: \"transfer\" },\n          { name: \"start fresh\", value: \"reset\" },\n        ],\n      });\n  const deploymentStatePath = deploymentStateDir(args.deploymentName);\n  if (choice === \"reset\") {\n    recursivelyDelete(ctx, deploymentStatePath, { force: true });\n    saveDeploymentConfig(ctx, args.deploymentName, newConfig);\n    return runLocalBackend(ctx, {\n      binaryPath: args.newBinaryPath,\n      deploymentName: args.deploymentName,\n      ports: args.ports,\n    });\n  }\n  return handleUpgrade(ctx, {\n    deploymentName: args.deploymentName,\n    oldVersion: args.oldVersion,\n    newBinaryPath: args.newBinaryPath,\n    newVersion: args.newVersion,\n    ports: args.ports,\n    adminKey: args.adminKey,\n  });\n}\n\nasync function handleUpgrade(\n  ctx: Context,\n  args: {\n    deploymentName: string;\n    oldVersion: string;\n    newBinaryPath: string;\n    newVersion: string;\n    ports: {\n      cloud: number;\n      site: number;\n    };\n    adminKey: string;\n  },\n): Promise<{ cleanupHandle: string }> {\n  const { binaryPath: oldBinaryPath } = await ensureBackendBinaryDownloaded(\n    ctx,\n    {\n      kind: \"version\",\n      version: args.oldVersion,\n    },\n  );\n\n  logVerbose(ctx, \"Running backend on old version\");\n  const { cleanupHandle: oldCleanupHandle } = await runLocalBackend(ctx, {\n    binaryPath: oldBinaryPath,\n    ports: args.ports,\n    deploymentName: args.deploymentName,\n  });\n\n  logVerbose(ctx, \"Downloading env vars\");\n  const deploymentUrl = localDeploymentUrl(args.ports.cloud);\n  const envs = (await runQuery(\n    ctx,\n    deploymentUrl,\n    args.adminKey,\n    \"_system/cli/queryEnvironmentVariables\",\n    undefined,\n    {},\n  )) as Array<{\n    name: string;\n    value: string;\n  }>;\n\n  logVerbose(ctx, \"Doing a snapshot export\");\n  const exportPath = path.join(\n    deploymentStateDir(args.deploymentName),\n    \"export.zip\",\n  );\n  if (ctx.fs.exists(exportPath)) {\n    ctx.fs.unlink(exportPath);\n  }\n  const snaphsotExportState = await startSnapshotExport(ctx, {\n    deploymentName: args.deploymentName,\n    deploymentUrl,\n    adminKey: args.adminKey,\n    includeStorage: true,\n    inputPath: exportPath,\n  });\n  if (snaphsotExportState.state !== \"completed\") {\n    return ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: \"Failed to export snapshot\",\n    });\n  }\n  await downloadSnapshotExport(ctx, {\n    snapshotExportTs: snaphsotExportState.complete_ts,\n    inputPath: exportPath,\n    adminKey: args.adminKey,\n    deploymentUrl,\n  });\n\n  logVerbose(ctx, \"Stopping the backend on the old version\");\n  const oldCleanupFunc = ctx.removeCleanup(oldCleanupHandle);\n  if (oldCleanupFunc) {\n    await oldCleanupFunc();\n  }\n  await ensureBackendStopped(ctx, {\n    ports: args.ports,\n    maxTimeSecs: 5,\n    deploymentName: args.deploymentName,\n    allowOtherDeployments: false,\n  });\n\n  // TODO(ENG-7078) save old artifacts to backup files\n  logVerbose(ctx, \"Running backend on new version\");\n  const { cleanupHandle } = await runLocalBackend(ctx, {\n    binaryPath: args.newBinaryPath,\n    ports: args.ports,\n    deploymentName: args.deploymentName,\n  });\n\n  logVerbose(ctx, \"Importing the env vars\");\n  if (envs.length > 0) {\n    const fetch = deploymentFetch(deploymentUrl, args.adminKey);\n    try {\n      await fetch(\"/api/update_environment_variables\", {\n        body: JSON.stringify({ changes: envs }),\n        method: \"POST\",\n      });\n    } catch (e) {\n      return await logAndHandleFetchError(ctx, e);\n    }\n  }\n\n  logVerbose(ctx, \"Doing a snapshot import\");\n  const importId = await uploadForImport(ctx, {\n    deploymentUrl,\n    adminKey: args.adminKey,\n    filePath: exportPath,\n    importArgs: { format: \"zip\", mode: \"replace\", tableName: undefined },\n    onImportFailed: async (e) => {\n      logFailure(ctx, `Failed to import snapshot: ${e}`);\n    },\n  });\n  logVerbose(ctx, `Snapshot import started`);\n  let status = await waitForStableImportState(ctx, {\n    importId,\n    deploymentUrl,\n    adminKey: args.adminKey,\n    onProgress: () => {\n      // do nothing for now\n      return 0;\n    },\n  });\n  if (status.state !== \"waiting_for_confirmation\") {\n    return ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: \"Failed to upload snapshot\",\n    });\n  }\n\n  await confirmImport(ctx, {\n    importId,\n    adminKey: args.adminKey,\n    deploymentUrl,\n    onError: async (e) => {\n      logFailure(ctx, `Failed to confirm import: ${e}`);\n    },\n  });\n  logVerbose(ctx, `Snapshot import confirmed`);\n  status = await waitForStableImportState(ctx, {\n    importId,\n    deploymentUrl,\n    adminKey: args.adminKey,\n    onProgress: () => {\n      // do nothing for now\n      return 0;\n    },\n  });\n  logVerbose(ctx, `Snapshot import status: ${status.state}`);\n  if (status.state !== \"completed\") {\n    return ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: \"Failed to import snapshot\",\n    });\n  }\n\n  logFinishedStep(ctx, \"Successfully upgraded to a new backend version\");\n  saveDeploymentConfig(ctx, args.deploymentName, {\n    ports: args.ports,\n    backendVersion: args.newVersion,\n    adminKey: args.adminKey,\n  });\n\n  return { cleanupHandle };\n}\n"],
  "mappings": "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",
  "names": ["import_run", "path"]
}
